<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C on Tech Notebook</title><link>https://wiki.deimos.fr/docs/coding/c/</link><description>Recent content in C on Tech Notebook</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 01 May 2025 20:33:41 +0200</lastBuildDate><atom:link href="https://wiki.deimos.fr/docs/coding/c/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to C</title><link>https://wiki.deimos.fr/Introduction_au_C/</link><pubDate>Tue, 18 Jan 2011 12:50:00 +0200</pubDate><guid>https://wiki.deimos.fr/Introduction_au_C/</guid><description>&lt;h2 id="introduction">Introduction &lt;a href="#introduction" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>The history of the C language is intimately linked to that of the UNIX operating system. In 1965, Ken Thompson, from Bell Labs, developed an operating system that he called MULTICS (Multiplexed Information and Computing System) in order to run a game he had created, which gave birth in 1970 to the UNICS operating system (Uniplexed Information and Computing System), quickly renamed UNIX.&lt;/p>
&lt;p>At the time, assembly language was the only language that allowed the development of an operating system. Ken Thompson then developed a higher-level language, the B language (whose name comes from BCPL, a subset of the CPL language, itself derived from Algol, a language that was popular at the time), to facilitate the writing of operating systems. It was a weakly typed language (an untyped language, as opposed to a typed language, is a language that manipulates objects in their binary form, without any notion of type (character, integer, real, etc.)) and too dependent on the PDP-7 (the machine on which UNIX was developed) to allow UNIX to be ported to other machines. So Denis Ritchie (who was, along with Ken Thompson, one of the creators of UNIX) and Brian Kernighan improved the B language to give birth to the C language. In 1973, UNIX was rewritten entirely in C. For 5 years, the C language was limited to internal use at Bell until the day Brian Kernighan and Denis Ritchie published a first definition of the language in a book entitled &amp;ldquo;The C Programming Language&amp;rdquo;. This was the beginning of a revolution in the world of computing.&lt;/p></description></item><item><title>Some examples of CMake usage</title><link>https://wiki.deimos.fr/Quelques_exemples_d'utilisation_de_CMake/</link><pubDate>Sun, 06 Dec 2009 16:17:00 +0200</pubDate><guid>https://wiki.deimos.fr/Quelques_exemples_d'utilisation_de_CMake/</guid><description>&lt;h2 id="introduction">Introduction &lt;a href="#introduction" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>&lt;a href="https://fr.wikipedia.org/wiki/Cmake" rel="external" target="_blank">CMake&lt;svg width="16" height="16" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">&lt;path fill="currentColor" d="M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z"/>&lt;/svg>&lt;/a> is a cross-platform build system. It is comparable to Make in that the software build process is entirely controlled by configuration files, called CMakeLists.txt in the case of CMake. But CMake doesn&amp;rsquo;t directly produce the final software; it handles the generation of standard build files: makefiles on Unix, and Visual Studio project files on Windows. This allows developers to use their preferred development environment as usual. This use of common development tools is what distinguishes CMake from other build systems like SCons or Autotools.&lt;/p></description></item><item><title>Better Understanding and Using the C Language Preprocessor</title><link>https://wiki.deimos.fr/Mieux_conna%C3%AEtre_et_utiliser_le_pr%C3%A9processeur_du_langage_C/</link><pubDate>Sun, 06 Dec 2009 15:40:00 +0200</pubDate><guid>https://wiki.deimos.fr/Mieux_conna%C3%AEtre_et_utiliser_le_pr%C3%A9processeur_du_langage_C/</guid><description>&lt;h2 id="introduction">Introduction &lt;a href="#introduction" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>In the C language, preprocessing is the preliminary stage before compilation. It&amp;rsquo;s a powerful mechanism that allows conditional compilation, file inclusion, and macro definition. Although these features appear simple at first glance, they must be used carefully to avoid compilation errors or, worse, program malfunctions. Additionally, the GCC preprocessor has additional features that can be very useful.&lt;/p>
&lt;h2 id="a-little-known-compiler-failure">A Little-Known Compiler Failure &lt;a href="#a-little-known-compiler-failure" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>Thanks to the C macro processor, it&amp;rsquo;s possible to define and use constants as follows:&lt;/p></description></item></channel></rss>