<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Tech Notebook</title><link>https://wiki.deimos.fr/docs/coding/java/</link><description>Recent content in Java on Tech Notebook</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 04 Apr 2025 17:45:45 +0200</lastBuildDate><atom:link href="https://wiki.deimos.fr/docs/coding/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Java Memory Management</title><link>https://wiki.deimos.fr/gestion_de_la_memoire_en_java/</link><pubDate>Fri, 02 May 2008 15:36:00 +0200</pubDate><guid>https://wiki.deimos.fr/gestion_de_la_memoire_en_java/</guid><description>&lt;p>Here is documentation on memory management usage. It&amp;rsquo;s not up to date but it explains very well how a JVM works.&lt;/p>
&lt;p>&lt;a href="https://wiki.deimos.fr/pdf/memoire-java.pdf">Documentation on Java memory management&lt;/a>&lt;/p></description></item><item><title>Debugging a JVM Crash</title><link>https://wiki.deimos.fr/Debugger_un_crash_de_JVM/</link><pubDate>Sun, 20 Apr 2008 11:30:00 +0200</pubDate><guid>https://wiki.deimos.fr/Debugger_un_crash_de_JVM/</guid><description>&lt;h2 id="introduction">Introduction &lt;a href="#introduction" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>You may have an application that has problems such as crashing, but the port and process remain up anyway. This happened to me particularly with Atlassian&amp;rsquo;s Confluence wiki.&lt;/p>
&lt;h2 id="problem">Problem &lt;a href="#problem" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>The application crashes, yet it still remains up at the process and port level. Therefore, we need to debug the JVM.&lt;/p>
&lt;p>I won&amp;rsquo;t explain in detail how a JVM works, but here are the basics:&lt;/p>
&lt;ul>
&lt;li>The minimum memory allocated to an application is defined by the Xms option. At startup, the application will consume the value of Xms (in this case 1GB).&lt;/li>
&lt;li>The maximum memory allocated to the application is defined by the Xmx option. The application will therefore reserve (in this case) 1GB of RAM that can be used &lt;strong>only&lt;/strong> by the JVM.&lt;/li>
&lt;li>For choosing Xms and Xmx values, it&amp;rsquo;s sufficient to check the memory consumption (generally the application provides this information).&lt;/li>
&lt;li>Garbage Collections (GC or memory purging) happen regularly when reaching approximately 90% to 95% of Xmx. This frees up memory space from stored objects. The disadvantage is that when this Full GC operates, the application temporarily freezes. During this period, it&amp;rsquo;s no longer possible to access the application. Full GCs may chain together if the Xmx is too low since they launch too frequently, which can completely freeze the application.&lt;/li>
&lt;/ul>
&lt;h2 id="changing-boot-options">Changing Boot Options &lt;a href="#changing-boot-options" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>Here&amp;rsquo;s an example of how to enable loggc which will allow us to see if the JVM is doing too many GCs, or performing a Full GC:&lt;/p></description></item></channel></rss>