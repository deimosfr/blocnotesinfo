<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Permissions on Tech Notebook</title><link>https://wiki.deimos.fr/tags/permissions/</link><description>Recent content in Permissions on Tech Notebook</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 28 Apr 2025 18:51:06 +0200</lastBuildDate><atom:link href="https://wiki.deimos.fr/tags/permissions/index.xml" rel="self" type="application/rss+xml"/><item><title>ACL: Implementing NT-type Permissions on Linux</title><link>https://wiki.deimos.fr/ACL:_Impl%C3%A9mentation_des_droits_de_type_NT_sur_Linux/</link><pubDate>Mon, 06 May 2013 15:00:00 +0200</pubDate><guid>https://wiki.deimos.fr/ACL:_Impl%C3%A9mentation_des_droits_de_type_NT_sur_Linux/</guid><description>&lt;p>An ACL, or Access Control List, is simply defined as a list of permissions on a file, directory, or tree structure, added to the &amp;ldquo;classic&amp;rdquo; permissions (technically, POSIX.1 permissions) of that file. These permissions concern defined users and/or groups. ACL management under GNU/Linux is inspired by the POSIX 1003.1e standard (project 17) but does not fully comply with it.&lt;/p>
&lt;p>With ACLs, you can extend the number of users and groups that have rights to the same file. Remember that in the UNIX world, each file can normally only indicate permissions for a single user and a single group, which are opposed to a single category corresponding to &amp;ldquo;all others&amp;rdquo; (or &amp;ldquo;the rest of the world&amp;rdquo;). With ACLs, you can (among other things) add other users and groups to a file and define their rights separately. This brings the system closer to the permission system used on NT platforms (although many differences remain).&lt;/p></description></item><item><title>Restore permissions on Red Hat</title><link>https://wiki.deimos.fr/Restaurer_les_permissions_d%5C%27une_Red_Hat/</link><pubDate>Sat, 04 Feb 2012 17:50:00 +0200</pubDate><guid>https://wiki.deimos.fr/Restaurer_les_permissions_d%5C%27une_Red_Hat/</guid><description>&lt;h2 id="introduction">Introduction &lt;a href="#introduction" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>A colleague of mine made a serious mistake (running &lt;code>chown -Rf mysql&lt;/code> on &lt;code>/&lt;/code>!). This caused a huge mess, and we had to find a solution to restore the correct permissions.&lt;/p>
&lt;p>Fortunately, Red Hat anticipated these kinds of errors and included the &lt;code>--setperms&lt;/code> and &lt;code>--setugids&lt;/code> options in the &lt;code>rpm&lt;/code> command to repair permissions on installed packages. Basically, this gives you a way to repair your machine.&lt;/p>
&lt;p>So if you also made a mistake like this, know that there is a solution on Red Hat.&lt;/p></description></item><item><title>ACL: Implementing NT-Style Permissions on Solaris</title><link>https://wiki.deimos.fr/ACL_Implementation_droits_type_NT_sur_Solaris/</link><pubDate>Wed, 10 Feb 2010 13:13:00 +0200</pubDate><guid>https://wiki.deimos.fr/ACL_Implementation_droits_type_NT_sur_Solaris/</guid><description>&lt;h2 id="introduction">Introduction &lt;a href="#introduction" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>With respect to a computer filesystem, an access control list (&lt;a href="https://en.wikipedia.org/wiki/Access_control_list" rel="external" target="_blank">ACL&lt;svg width="16" height="16" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">&lt;path fill="currentColor" d="M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z"/>&lt;/svg>&lt;/a>) is a list of permissions attached to an object. An ACL specifies which users or system processes are granted access to objects, as well as what operations are allowed to be performed on given objects. In a typical ACL, each entry in the list specifies a subject and an operation (e.g. the entry (Alice, delete) on the ACL for file WXY gives Alice permission to delete file WXY).&lt;/p></description></item><item><title>Sudo: Running commands as root without being root</title><link>https://wiki.deimos.fr/Sudo_:_Ex%C3%A9cuter_des_commandes_en_root_sans_l%27%C3%AAtre/</link><pubDate>Sun, 20 Sep 2009 18:01:00 +0200</pubDate><guid>https://wiki.deimos.fr/Sudo_:_Ex%C3%A9cuter_des_commandes_en_root_sans_l%27%C3%AAtre/</guid><description>&lt;h2 id="introduction">Introduction &lt;a href="#introduction" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>Sudo is frequently used and very practical because it allows occasional execution of commands as root without being logged in as root. It has several security options for usage.&lt;/p>
&lt;h2 id="installation">Installation &lt;a href="#installation" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>It&amp;rsquo;s super simple as usual:&lt;/p>



 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="ea84b80" class="language-bash ">
 &lt;code>apt-get install sudo&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="configuration">Configuration &lt;a href="#configuration" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>Edit the &lt;code>/etc/sudoers&lt;/code> file and adapt according to your needs&amp;hellip;&lt;/p>
&lt;h3 id="give-all-rights-to-a-person">Give all rights to a person &lt;a href="#give-all-rights-to-a-person" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h3>&lt;p>Warning: this operation is equivalent to giving all root rights to a person. They will be able to change the root password, see everything, delete everything. If you wish to apply this type of rights, add this:&lt;/p></description></item><item><title>Quickly Grant User Access to Cluster Commands</title><link>https://wiki.deimos.fr/Autoriser_rapidement_un_utilisateur_%C3%A0_avoir_acc%C3%A8s_aux_commandes_cluster/</link><pubDate>Thu, 31 May 2007 10:12:00 +0200</pubDate><guid>https://wiki.deimos.fr/Autoriser_rapidement_un_utilisateur_%C3%A0_avoir_acc%C3%A8s_aux_commandes_cluster/</guid><description>&lt;h2 id="introduction">Introduction &lt;a href="#introduction" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>We often need users to have access to specific commands without being root, and for cluster management, if you have dedicated administrators, it&amp;rsquo;s quite useful. Here&amp;rsquo;s a simple way to give them the necessary permissions&amp;hellip;&lt;/p>
&lt;h2 id="configuration">Configuration &lt;a href="#configuration" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>To give a user permissions to simply use cluster commands, here are the files to modify:&lt;/p>
&lt;ul>
&lt;li>/etc/sudoers:&lt;/li>
&lt;/ul>



 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="830d9f0" class="language- ">
 &lt;code># Cmnd alias specification
Cmnd_Alias CLUSTAT = /usr/sbin/clustat
Cmnd_Alias CLUSVCADM = /usr/sbin/clusvcadm
Cmnd_Alias MOUNT = /bin/mount
Cmnd_Alias UMOUNT = /bin/umount

# Defaults specification

# User privilege specification
root ALL=(ALL) ALL
my_user ALL=NOPASSWD:CLUSTAT,NOPASSWD:CLUSVCADM,NOPASSWD:MOUNT,NOPASSWD:UMOUNT&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;ul>
&lt;li>~/.bashrc (for the user)&lt;/li>
&lt;/ul>



 
 
 

 
 
 
 

 

 &lt;div class="prism-codeblock ">
 &lt;pre id="47f04f3" class="language-bash ">
 &lt;code># User specific aliases and functions
alias clustat=&amp;#39;sudo /usr/sbin/clustat&amp;#39;
alias clusvcadm=&amp;#39;sudo /usr/sbin/clusvcadm&amp;#39;
alias mount=&amp;#39;sudo /bin/mount&amp;#39;
alias umount=&amp;#39;sudo /bin/umount&amp;#39;&lt;/code>
 &lt;/pre>
 &lt;/div>
&lt;h2 id="usage">Usage &lt;a href="#usage" class="anchor" aria-hidden="true">&lt;i class="material-icons align-middle">link&lt;/i>&lt;/a>&lt;/h2>&lt;p>With my user account, I can simply run the commands and they will be executed as root:&lt;/p></description></item></channel></rss>